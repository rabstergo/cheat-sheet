def exampleMethod
  puts 'hello'
end

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Инкапсуляция, наследование, полиморфизм, абстракция
_____________________________________________________________________

Инкапсуляция:
	1) Сокрытие данных. Например с помощью private, protected в C++
	2) Объединение данных и методов вместе для совместной работы

Наследование:
	Класс основан на другом классе и использует его данные и методы.
	Цель - повторное использование кода

Полиморфизм:
	Часть кода или операции или объекты ведут себя по разному в разных ситуациях.
	1) Compile Time (Static) Polymorphism - overloading 
	2) Run Time (Dynamic) Polymorphism - overriding

Абстракция:
	Выделение важных деталей, отделение неважных для решения конкретной задачи.
	В итоге получаем свое видение проблемы или модель проблемы, в конечном счёте
		формализируем проблему в виде класса

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Разница между Инкапсуляцией и Абстракцией
_____________________________________________________________________

	Абстракция:
		1) Решает проблему на уровне проектирования
		2) Позволяет отображать важные аспекты, скрывая детали реализации

	Инкапсуляция:
		1) Решает проблему на уровне реализации
		2) Связывает код и данные в единое целое и скрывает их от мира


‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Finalize and Garbage Collection(GC)
_____________________________________________________________________

	Finalize:
		Выполнение определенных действий перед удалением объекта сборщиком мусора. Данные действия могут потребоваться для освобождения каких-либо ресурсов, например, файлов или сетевых соединений

	Garbage Collection:
		Сборщик мусора освобождает пространство, занимаемое объектами, которых больше нет.

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Differentiate between an abstract class and an interface
_____________________________________________________________________


‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Basis for comparison	Abstract Class									Interface
_______________________________________________________________________________________________________________________
Methods					Can have abstract as well as other methods		Only abstract methods
_______________________________________________________________________________________________________________________
Final Variables			May contain final and non-final variables		Variables declared are final by default
_______________________________________________________________________________________________________________________
Accessibility			Can be private, public, etc						Public by default
_______________________________________________________________________________________________________________________
Implementation			Can provide the implementation of an interface	Cannot provide the implementation of an ab.class
_______________________________________________________________________________________________________________________
